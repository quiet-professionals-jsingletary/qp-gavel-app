{"version":3,"sources":["../node_modules/@arcgis/core/core/workers/request.js"],"names":["t","s","o","n","responseType","a","signal","e","invokeStaticMessage","url","options","then","l","i","u","c","data","Blob","FileReaderSync","readAsText","JSON","parse","requestOptions","r","message","error","ssl"],"mappings":"uKAI2DA,E,wBAAE,SAASC,EAAEA,GAAO,IAALC,EAAK,uDAAH,GAAQC,EAAED,EAAEE,aAAaD,EAAE,SAASA,GAAG,SAASA,GAAG,SAASA,GAAG,iBAAiBA,IAAIA,EAAE,QAAQA,EAAE,OAAO,IAAME,EAAEH,GAAGA,EAAEI,OAAO,cAAcJ,EAAEI,OAAOC,IAAEC,oBAAoB,UAAU,CAACC,IAAIR,EAAES,QAAQR,GAAG,CAACI,OAAOD,IAAIM,MAAM,SAAAJ,GAAI,IAAmBK,EAAEC,EAAEC,EAAEC,EAAnBV,EAAEE,EAAES,KAAiB,GAAGX,KAAK,SAASF,GAAG,SAASA,GAAG,SAASA,IAAIS,EAAE,IAAIK,KAAK,CAACZ,IAAI,SAASF,GAAG,SAASA,IAAIH,IAAIA,EAAE,IAAIkB,gBAAgBL,EAAEb,EAAEmB,WAAWP,GAAG,SAAST,KAAK,CAAC,IAAIW,EAAEM,KAAKC,MAAMR,GAAG,MAAM,MAAMN,GAAG,IAAMP,EAAC,2BAAKO,GAAL,IAAOE,IAAIR,EAAEqB,eAAepB,IAAG,MAAM,IAAIqB,IAAE,iBAAiBhB,EAAEiB,QAAQxB,GAAG,GAAGc,EAAEW,MAAM,CAAC,IAAMlB,EAAC,2BAAKO,EAAEW,OAAP,IAAahB,IAAIR,EAAEqB,eAAepB,IAAG,MAAM,IAAIqB,IAAE,iBAAiBT,EAAEW,MAAMD,QAAQjB,IAAI,OAAOJ,GAAG,IAAI,OAAOY,EAAED,EAAE,MAAM,IAAI,OAAOC,EAAEF,EAAE,MAAM,IAAI,OAAOE,EAAEH,EAAE,MAAM,QAAQG,EAAEV,EAAE,MAAM,CAACW,KAAKD,EAAEO,eAAepB,EAAEwB,IAAInB,EAAEmB,IAAIjB,IAAIR","file":"static/js/105.ad615d06.chunk.js","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.18/esri/copyright.txt for details.\n*/\nimport e from\"../global.js\";import r from\"../Error.js\";let t;function s(s,o={}){let n=o.responseType;n?\"json\"!==n&&\"text\"!==n&&\"blob\"!==n&&\"array-buffer\"!==n&&(n=\"text\"):n=\"json\";const a=o&&o.signal;return delete o.signal,e.invokeStaticMessage(\"request\",{url:s,options:o},{signal:a}).then((e=>{const a=e.data;let l,i,u,c;if(a&&!(\"json\"!==n&&\"text\"!==n&&\"blob\"!==n||(l=new Blob([a]),\"json\"!==n&&\"text\"!==n||(t||(t=new FileReaderSync),i=t.readAsText(l),\"json\"!==n)))){try{u=JSON.parse(i||null)}catch(e){const t={...e,url:s,requestOptions:o};throw new r(\"request:server\",e.message,t)}if(u.error){const e={...u.error,url:s,requestOptions:o};throw new r(\"request:server\",u.error.message,e)}}switch(n){case\"json\":c=u;break;case\"text\":c=i;break;case\"blob\":c=l;break;default:c=a}return{data:c,requestOptions:o,ssl:e.ssl,url:s}}))}export{s as execute};\n"],"sourceRoot":""}